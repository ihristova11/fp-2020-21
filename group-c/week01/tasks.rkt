#lang racket
; ======================================================================
; Зад. 0: Да се дефинира функция (mod x), която връща |x|
(define (mod x)
  (if (< x 0)
      (- x)
      x
  )
)

; Зад. 1: Да се дефинира функция (fib n), която намира n-тото число на Фибоначи (нека (fib 0) = 0, (fib 1) = 1)
(define (fib n)
  (
   cond
      ((= n 0) 0)
      ((= n 1) 1)
      (else (+ (fib (- n 1)) (fib (- n 2))))
    )
  )

; Зад. 2: Да се дефинира функция (bcd x y), която намира най-големия общ делител на числата x и y
(define (bcd x y)
  (
   cond
    ((> x y) (bcd y x))
    ((= x 0) y)
    (else (bcd (remainder y x) x))
   )
  )

; Зад. 3: Да се дефинира функция (div x y), която връща #t ако y дели x и #f в противен случай
(define (div x y) (= (remainder x y) 0))

; Зад. 4: Да се дефинира функция (sum-divisors n a b), която намира сумата на всички делители на числото n в затворения интервал [a, b]

(define (sum-divisors n a b)
  (
   if (> a b)
      0
      (+ (sum-divisors n (+ a 1) b)
       (if (div n a) a 0)
       )
   )
  )

; Зад. 5: Да се дефинира функция (root a b c), която връща един от реалните корени на квадратното уравнение ax^2 + bx + c = 0 или #f ако уравнението няма такива
(define (root a b c)
  (define D (- (* b b) (* 4 (* a c))))
  (
   if (< D 0)
      #f
      (/ (+ (- b) (sqrt D)) (* 2 a))
   )
  )

; Зад. 6: Да се дефинира функция (dec-digits? n), която връща #t ако цифрите на числото n образуват намаляваща редица и #f в противен случай
(define (dec-digits? n)
  (
   cond
    ((< n 10) #t)
    ((<= (remainder (floor (/ n 10)) 10) (remainder n 10)) #f)
    (else (dec-digits? (floor (/ n 10))))
   )
  )
